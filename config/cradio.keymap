// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Home row mods macro
#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4
#define WHRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LCTRL k2  &ht LGUI k3  &ht LALT k4
#define WHRMR(k1,k2,k3,k4) &ht RALT k1  &ht RGUI k2  &ht RCTRL k3  &ht RSHFT k4

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4



/ {
    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

   combos {
        compatible = "zmk,combos";
            combo_esc {
                    timeout-ms = <50>;
                    key-positions = <0 1>;
                    bindings = <&kp ESC>;
            };
    
    
            combo_copyw {
                    timeout-ms = <50>;
                    key-positions = <21 22>;
                    bindings = <&kp LALT(C)>;
                    layers = <1>;
            };
           
            combo_pastew {
                    timeout-ms = <50>;
                    key-positions = <22 23>;
                    bindings = <&kp LALT(V)>;
                    layers = <1>;
            };
           
            combo_undow {
                    timeout-ms = <50>;
                    key-positions = <20 24>;
                    bindings = <&kp LALT(Z)>;
                    layers = <1>;
            };
    
            combo_copym {
                    timeout-ms = <50>;
                    key-positions = <21 22>;
                    bindings = <&kp LGUI(C)>;
                    layers = <0>;
            };
    
            combo_pastem {
                    timeout-ms = <50>;
                    key-positions = <22 23>;
                    bindings = <&kp LGUI(V)>;
                    layers = <0>;
            };
    
            combo_undom {
                    timeout-ms = <50>;
                    key-positions = <20 24>;
                    bindings = <&kp LGUI(Z)>;
                    layers = <0>;
            };
    
            combo_backspace {
                    timeout-ms = <50>;
                    key-positions = <8 9>;
                    bindings = <&kp BACKSPACE>;
                    layers = <0 1 3>;
            };
    
            combo_enter {
                    timeout-ms = <50>;
                    key-positions = <31 32>;
                    bindings = <&kp ENTER>;
            };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <RIG LEF>;
            then-layer = <TRI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
            &kp Q      &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P
            HRML(A,        S,         D,         F)     &kp G          &kp H      HRMR(J,        K,         L,        SQT)
            &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp M      &kp COMMA  &kp DOT    &kp FSLH
                                            &lt 2 TAB   &kp ENTER     &kp SPACE  &lt 3 BSPC
            >;
        };

        win_layer {
            bindings = <
            &kp Q      &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P
            WHRML(A,        S,         D,         F)     &kp G          &kp H      WHRMR(J,        K,         L,        SQT)
            &kp Z      &kp X      &kp C      &kp V      &kp B          &kp N      &kp M      &kp COMMA  &kp DOT    &kp FSLH
                                            &lt 2 TAB   &kp ENTER     &kp SPACE  &lt 3 BSPC
            >;
        };


        
         left_layer {
            bindings = <
            &kp INS    &kp N1     &kp N2     &kp N3     &trans         &kp PG_UP     &kp HOME   &kp UP     &kp END     &trans
            &kp DEL    &kp N4     &kp N5     &kp N6     &trans         &kp PG_DN     &kp LEFT   &kp DOWN   &kp RIGHT   &trans
           &caps_word  &kp N7     &kp N8     &kp N9     &kp N0         &trans        &trans     &trans     &trans      &trans
                                             &trans     &kp ESC        &trans        &trans
            >;
        };

        right_layer {
            bindings = <
            &trans     &kp LBKT   &kp LBRC   &kp RBRC   &trans         &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT   &kp TILDE
            &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT      &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH   &kp GRAVE
            &trans     &trans     &trans     &kp COLON  &kp SEMI       &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE   &trans
                                             &trans     &trans         &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
            &kp F1     &kp F2     &kp F3     &kp F4     &bt BT_SEL 0     &bt BT_SEL 2  &out OUT_TOG &tog WIN  &kp C_MUTE  &kp C_NEXT
            &kp F5     &kp F6     &kp F7     &kp F8     &bt BT_SEL 1     &bt BT_SEL 3  &kp C_BRI_UP  &trans   &kp C_VOL_UP  &kp C_PP
            &kp F9     &kp F10    &kp F11    &kp F12     &bt BT_CLR      &bt BT_SEL 4  &kp C_BRI_DEC  &trans   &kp C_VOL_DN &kp C_PREV
                                                &trans     &trans         &trans     &trans
            >;
        };
    };
};
