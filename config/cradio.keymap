// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define ALPHABETS 0
#define RIG 2
#define LEF 3
#define TRI 4

// 1. Add OS toggle at the top
#define OS_WIN 0  // Windows mode
#define OS_MAC 1  // Mac mode
#define OS_MODE OS_WIN  // Default to Windows (change this or make it dynamic)

// 2. OS-aware homerow macros
#define HRML(k1,k2,k3,k4) \
    COND(OS_MODE == OS_WIN, \
        &ht LSHFT k1 &ht LCTRL k2 &ht LGUI k3 &ht LALT k4, \  // Win order
        &ht LSHFT k1 &ht LALT k2 &ht LCTRL k3 &ht LGUI k4     // Mac order
    )

#define HRMR(k1,k2,k3,k4) \
    COND(OS_MODE == OS_WIN, \
        &ht RALT k1 &ht RGUI k2 &ht RCTRL k3 &ht RSHFT k4, \  // Win order
        &ht RGUI k1 &ht RCTRL k2 &ht RALT k3 &ht RSHFT k4      // Mac order
    )


// Configure mmv behavior
&mmv {
    x-input-code = <INPUT_REL_X>;
    y-input-code = <INPUT_REL_Y>;
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <2>;
};

&msc {
    x-input-code = <INPUT_REL_HWHEEL>;
    y-input-code = <INPUT_REL_WHEEL>;
    time-to-max-speed-ms = <300>;
    acceleration-exponent = <2>;
};

/{
    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        os_aware_mods: os_aware_mods {
            compatible = "zmk,behavior-host-os-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&kp>;
        };

        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_backdel {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&bspc_del>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <RIG LEF>;
            then-layer = <TRI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        alpha_layer {
            bindings = <
                &kp Q      &kp W      &kp E      &kp R       &kp T          &kp Y      &kp U      &kp I      &kp O      &kp P
                HRML(A,    S,         D,         F)         &kp G          &kp H      HRMR(J,    K,         L,        SQT)
                &kp Z      &kp X      &kp C      &kp V       &kp B          &kp N      &kp M      &kp COMMA  &kp DOT    &kp FSLH
                                                &lt LEF TAB  &kp ENTER     &kp SPACE  &lt RIG BSPC 
            >;
        };
     
        left_layer {
            bindings = <
                &trans     &kp LBKT   &kp LBRC   &kp RBRC   &trans          &kp CARET  &kp LPAR   &kp RPAR   &kp RBKT   &kp TILDE
                &kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT       &kp ASTRK  &kp MINUS  &kp EQUAL  &kp BSLH   &kp GRAVE
                &trans     &trans     &trans     &kp COLON  &kp SEMI        &kp AMPS   &kp UNDER  &kp PLUS   &kp PIPE   &trans
                                             &trans     &trans          &trans     &trans
            >;
        }; 
        
        right_layer {
            bindings = <
                &kp INS     &kp N1     &kp N2     &kp N3     &kp DOT        &mkp MCLK        &msc SCRL_LEFT   &msc SCRL_DOWN  &msc SCRL_UP    &msc SCRL_RIGHT  
                &kp DEL     &kp N4     &kp N5     &kp N6     &kp N0         &mkp RCLK        &kp LEFT         &kp DOWN        &kp UP          &kp RIGHT       
                &caps_word  &kp N7     &kp N8     &kp N9     &kp PRCNT      &mkp LCLK        &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_UP    &mmv MOVE_RIGHT  
                                              &trans     &trans         &trans           &trans
            >;
        };

        tri_layer {
            bindings = <
                &kp F1     &kp F2     &kp F3     &kp F4     &bt BT_SEL 0     &bt BT_SEL 2  &out OUT_TOG   &kp C_MUTE    &kp C_MUTE    &kp C_PP
                &kp F5     &kp F6     &kp F7     &kp F8     &bt BT_SEL 1     &bt BT_SEL 3  &kp C_BRI_UP   &trans   &kp C_VOL_UP  &kp C_NEXT
                &kp F9     &kp F10    &kp F11    &kp F12    &bt BT_CLR       &bt BT_SEL 4  &kp C_BRI_DEC  &trans   &kp C_VOL_DN  &kp C_PREV
                                             &trans     &trans           &trans        &trans
            >;
        };
    };
};
